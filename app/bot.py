# app/bot.py
from __future__ import annotations

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from .config import LOCAL_TZ

async def on_startup(*_):
    setup_jobs()
    if not scheduler.running:
        scheduler.start()
        print(f"[scheduler] ‚úÖ started (tz={scheduler.timezone}) at {datetime.now(LOCAL_TZ)}")

    # üîπ —Ä–∞–∑–æ–≤–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É (—â–æ–± –ø–æ–±–∞—á–∏—Ç–∏, —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î)
    scheduler.add_job(
        update_metals,
        trigger="date",
        run_date=datetime.now(LOCAL_TZ) + timedelta(seconds=5),
        id="metals_update_warmup",
        replace_existing=True,
    )
    print("[scheduler] queued warmup job +5s")

from .config import BOT_TOKEN, LOCAL_TZ

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ (—á–∞—Å–æ–≤–∞ –∑–æ–Ω–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥–∞)
scheduler = AsyncIOScheduler(timezone=LOCAL_TZ)

async def update_metals():
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–ª–∞–π–Ω-—Ñ–∞–π–ª—É –¥–ª—è Metals: –≤–∏–∫–ª–∏–∫–∞—î bash-—Å–∫—Ä–∏–ø—Ç.
    """
    print(f"[update_metals] triggered at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    proc = await asyncio.create_subprocess_exec(
        "bash", "scripts/update_metals.sh",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    if proc.returncode != 0:
        print("[update_metals] non-zero exit:", proc.returncode, stderr.decode(errors="ignore"))
    else:
        print("[update_metals] ok:", (stdout.decode(errors="ignore") or "").strip())

def setup_jobs() -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ cron-–¥–∂–æ–±—É. –°—Ç–∞—Ä—Ç—É—î–º–æ scheduler –Ω–∞ startup.
    """
    scheduler.add_job(
        update_metals,
        trigger="cron",
        hour="6-23",       # —â–æ–≥–æ–¥–∏–Ω–∏ 06..23 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
        minute="0",        # every hour at 00 minutes
        id="metals_update_hourly",
        replace_existing=True,
        misfire_grace_time=600,
    )

async def on_startup(*_):
    setup_jobs()
    if not scheduler.running:
        scheduler.start()
        print(f"[scheduler] ‚úÖ started (tz={scheduler.timezone}) at {datetime.now(LOCAL_TZ)}")

    # üîπ —Ä–∞–∑–æ–≤–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É (—â–æ–± –ø–æ–±–∞—á–∏—Ç–∏, —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î)
    scheduler.add_job(
        update_metals,
        trigger="date",
        run_date=datetime.now(LOCAL_TZ) + timedelta(seconds=5),
        id="metals_update_warmup",
        replace_existing=True,
    )
    print("[scheduler] queued warmup job +5s")

async def on_shutdown(*_) -> None:
    if scheduler.running:
        scheduler.shutdown(wait=False)

def build_bot() -> Bot:
    return Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML"),
    )

def build_dispatcher() -> Dispatcher:
    dp = Dispatcher()

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π router –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏
    from .commands import router as commands_router
    dp.include_router(commands_router)

    # –•—É–∫–∏ –∂–∏—Ç—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    return dp