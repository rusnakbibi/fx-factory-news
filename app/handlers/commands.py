# app/handlers/commands.py
from __future__ import annotations

import logging
import os
from pathlib import Path
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from ..config.settings import LOCAL_TZ, UTC
from ..config.topics import TOPIC_DEFS, TOPIC_EXPLAINERS
from ..services.translator import UA_DICT
from ..services.forex_client import get_events_thisweek_cached as fetch_calendar
from ..ui.filters import filter_events, normalize_impact
from ..ui.formatting import event_to_text
from ..utils.helpers import csv_to_list, chunk
from ..ui.keyboards import (
    back_kb,
    root_menu_kb, 
)
from ..core.database import ensure_sub, get_sub
from ..services.metals_parser import (
    load_today_from_file,
    load_week_from_file,
    mm_event_to_card_text
)

router = Router()
log = logging.getLogger(__name__)

IMPACT_EMOJI = {
    "High": "üî¥",
    "Medium": "üü†",
    "Low": "üü°",
    "Non-economic": "‚ö™Ô∏è",
}

METALS_TODAY_HTML = os.getenv("METALS_TODAY_HTML", "/data/metals_today.html")
METALS_WEEK_HTML_PATH = os.getenv("METALS_WEEK_HTML_PATH", "/data/metals_week.html")

# --------------------------- helpers ---------------------------

def resolve_data_path(filename: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É:
    - –ª–æ–∫–∞–ª—å–Ω–æ: ./data/<file>
    - –Ω–∞ Render: /data/<file>
    """
    # 1Ô∏è‚É£ –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ env (—è–∫—â–æ —Ç–∏ –ø—Ä–æ–ø–∏—Å–∞–≤ —É .env)
    env_path = os.getenv(f"METALS_{filename.upper().replace('.', '_')}")
    if env_path and Path(env_path).exists():
        return env_path

    # 2Ô∏è‚É£ –Ø–∫—â–æ —ñ—Å–Ω—É—î /data/<file> (Render)
    path_data = Path("/data") / filename
    if path_data.exists():
        return str(path_data)

    # 3Ô∏è‚É£ –Ü–Ω–∞–∫—à–µ fallback –Ω–∞ ./data/<file> (–ª–æ–∫–∞–ª–∫–∞)
    path_local = Path(__file__).resolve().parents[2] / "data" / filename
    return str(path_local)

def _rowdict(row) -> dict:
    if row is None:
        return {}
    return dict(row) if not isinstance(row, dict) else row

def _lang(subs: dict) -> str:
    return (subs.get("lang_mode") or "en").lower()

def _t_en_ua(lang: str, en: str, ua: str) -> str:
    return ua if lang == "ua" else en

def _week_bounds_local(now_local: datetime) -> tuple[datetime, datetime]:
    """
    –ú–µ–∂—ñ —Ç–∏–∂–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π TZ: –Ω–µ–¥—ñ–ª—è 00:00 ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–∞ –Ω–µ–¥—ñ–ª—è 00:00.
    """
    delta_days = (now_local.weekday() + 1) % 7  # Sun=0
    sunday_local = (now_local - timedelta(days=delta_days)).replace(
        hour=0, minute=0, second=0, microsecond=0
    )
    next_sunday_local = sunday_local + timedelta(days=7)
    return sunday_local, next_sunday_local

def _fmt_local_time(dt_utc: datetime) -> str:
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å –ø–æ–¥—ñ—ó –≤ –ª–æ–∫–∞–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 'Tue 09:30').
    """
    local = dt_utc.astimezone(LOCAL_TZ)
    return local.strftime("%a %H:%M")

def _compact_event_line(ev, lang: str) -> str:
    """
    –°—Ç–∏—Å–ª–∞ —Å—Ç—Ä—ñ—á–∫–∞ –¥–ª—è —Ö–∞–π–ª–∞–π—Ç—ñ–≤: emoji time CUR title (–±–µ–∑ –∑–∞–π–≤–∏—Ö —Ç–µ–≥—ñ–≤).
    """
    imp = (ev.impact or "").title()
    imp_emoji = IMPACT_EMOJI.get(imp, "‚Ä¢")
    t = _fmt_local_time(ev.date)
    cur = (ev.currency or "").upper()
    title = ev.title or ""
    return f"{imp_emoji} {t} {cur} ‚Äî {title}"

def _tutorial_text(lang: str = "en") -> str:
    if lang == "ua":
        return (
            "‚ùì <b>–î–æ–≤—ñ–¥–∫–∞</b>\n"
            "–ö–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç—ñ:\n\n"
            "‚Ä¢ <b>–°—å–æ–≥–æ–¥–Ω—ñ</b> ‚Äî –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –ø–æ–¥—ñ—ó –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∞—à–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.\n"
            "‚Ä¢ <b>–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è</b> ‚Äî –ø–æ–¥—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è (–Ω–µ–¥—ñ–ª—è‚Üí–Ω–µ–¥—ñ–ª—è) –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.\n"
            "‚Ä¢ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b> ‚Äî —Ç—É—Ç –≤–∏:\n"
            "   ‚Äî –æ–±–∏—Ä–∞—î—Ç–µ —Ä—ñ–≤–µ–Ω—å –≤–ø–ª–∏–≤—É –ø–æ–¥—ñ–π: High / Medium / Low / Non-economic;\n"
            "   ‚Äî –æ–±–∏—Ä–∞—î—Ç–µ –≤–∞–ª—é—Ç–∏ (USD, EUR —Ç–æ—â–æ), –∑–∞ —è–∫–∏–º–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó;\n"
            "   ‚Äî –ø–µ—Ä–µ–º–∏–∫–∞—î—Ç–µ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (EN/UA);\n"
            "   ‚Äî –∑–∞–¥–∞—î—Ç–µ —á–∞—Å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Äî –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ—á–∞—Ç–∫—É <b>–∫–æ–∂–Ω–æ—ó –ø–æ–¥—ñ—ó</b> –Ω–∞–¥—ñ–π–¥–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15 —Ö–≤ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó CPI).\n"
            "   (–ß–∞—Å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî –≤—ñ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É –∑–∞–¥–∞–Ω—É –≥–æ–¥–∏–Ω—É.)\n"
            "‚Ä¢ <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b> ‚Äî —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (5/10/15/30/60/120 —Ö–≤) –ø–µ—Ä–µ–¥ <b>–∫–æ–∂–Ω–æ—é –ø–æ–¥—ñ—î—é</b> —É Today/This week.\n"
            "‚Ä¢ <b>–©–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç</b> ‚Äî –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–æ–±–∏, –∫–æ–ª–∏ —â–æ–¥–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—Ç–∏—Å–ª–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.\n"
            "‚Ä¢ <b>–¢–µ–º–∏</b> ‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –º–∞–∫—Ä–æ—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ (CPI, GDP, PMI —Ç–æ—â–æ) –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é.\n"
            "‚Ä¢ <b>–í–∏–º–∫–Ω—É—Ç–∏</b> ‚Äî –∑—É–ø–∏–Ω—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É.\n\n"
            "<i>–ü–æ—Ä–∞–¥–∞:</i> —è–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —Ä–æ–∑—à–∏—Ä—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ (–¥–æ–¥–∞–π—Ç–µ –≤–∞–ª—é—Ç–∏ –∞–±–æ —Ä—ñ–≤–Ω—ñ –≤–ø–ª–∏–≤—É)."
        )
    else:
        return (
            "‚ùì <b>Tutorial</b>\n"
            "A quick guide to the bot controls:\n\n"
            "‚Ä¢ <b>Today</b> ‚Äî shows today's events with your filters applied.\n"
            "‚Ä¢ <b>This week</b> ‚Äî events for the current week (Sun‚ÜíSun) with filters.\n"
            "‚Ä¢ <b>Settings</b> ‚Äî here you can:\n"
            "   ‚Äî choose event impact levels: High / Medium / Low / Non-economic;\n"
            "   ‚Äî select currencies (USD, EUR, etc.) to include;\n"
            "   ‚Äî switch interface language (EN/UA);\n"
            "   ‚Äî set the <u>alert lead time</u> ‚Äî how many minutes <b>before each event</b> you'll get a reminder (e.g., 15 min before CPI release).\n"
            "   (Alert lead time does <b>not</b> affect the Daily Digest ‚Äî it is sent at the scheduled time.)\n"
            "‚Ä¢ <b>Alerts</b> ‚Äî quick presets (5/10/15/30/60/120 min) for reminders <b>before each event</b> in Today/This week.\n"
            "‚Ä¢ <b>Daily Digest</b> ‚Äî pick a time of day to receive a compact summary of upcoming events.\n"
            "‚Ä¢ <b>Topics</b> ‚Äî concise explainers for key macro indicators (CPI, GDP, PMI, etc.).\n"
            "‚Ä¢ <b>Stop</b> ‚Äî disables notifications for this chat.\n\n"
            "<i>Tip:</i> If results look empty, widen filters (add currencies or impact levels)."
        )

def _about_text(lang: str = "en") -> str:
    if lang == "ua":
        return (
            "‚ÑπÔ∏è <b>–ü—Ä–æ –±–æ—Ç–∞</b>\n"
            "–¶–µ–π –±–æ—Ç ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ –º–∞–∫—Ä–æ–µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏–º–∏ –ø–æ–¥—ñ—è–º–∏ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ "
            "<b>ForexFactory</b> (thisweek.json).\n\n"
            "‚Ä¢ <b>–î–∞–Ω—ñ:</b> –æ—Å–Ω–æ–≤–Ω—ñ –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (CPI, GDP, PMI, "
            "–∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å, —Ä—ñ—à–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫—ñ–≤ —Ç–æ—â–æ). –î–∞–Ω—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–æ—è–≤—ñ –Ω–æ–≤–∏—Ö –ø–æ–¥—ñ–π.\n"
            "‚Ä¢ <b>–§—ñ–ª—å—Ç—Ä–∏:</b> —É <i>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö</i> –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≤–ø–ª–∏–≤—É –Ω–æ–≤–∏–Ω (High/Medium/Low/Non-eco), "
            "–≤–∞–ª—é—Ç–∏, –º–æ–≤—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —á–∞—Å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Äî –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ–¥—ñ—ó –±–æ—Ç –Ω–∞–¥—ñ—à–ª–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n"
            "<i>–ó–∞—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:</i> —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –∑–∞—Ç—Ä–∏–º–∫–∏ –∞–±–æ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—ñ –¥–∂–µ—Ä–µ–ª–∞. "
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ —è–∫ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç."
        )
    else:
        return (
            "‚ÑπÔ∏è <b>About</b>\n"
            "This bot helps you track key macroeconomic events, sourced from "
            "<b>ForexFactory</b> (official thisweek.json).\n\n"
            "‚Ä¢ <b>Data:</b> core economic indicators such as CPI, GDP, PMI, "
            "labor market data, and central bank releases. Updates automatically as new events appear.\n"
            "‚Ä¢ <b>Filters:</b> in <i>Settings</i> you can choose news impact levels (High/Medium/Low/Non-eco), "
            "currencies, language, and alert time ‚Äî how many minutes before the event you'll receive a notification.\n\n"
            "<i>Disclaimer:</i> information may include delays or inaccuracies from the source. "
            "Use it as an analytical helper, not as trading advice."
        )

def _faq_text(lang: str = "en") -> str:
    if lang == "ua":
        return (
            "<b>‚ùì –ü–∏—Ç–∞–Ω–Ω—è-–í—ñ–¥–ø–æ–≤—ñ–¥—ñ</b>\n\n"
            "<b>–ó–≤—ñ–¥–∫–∏ –¥–∞–Ω—ñ?</b>\n"
            "–ó –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ JSON ForexFactory (thisweek.json).\n\n"
            "<b>–ß–æ–º—É —á–∞—Å —ñ–Ω—à–∏–π, –Ω—ñ–∂ –Ω–∞ —Å–∞–π—Ç—ñ?</b>\n"
            "–ë–æ—Ç –ø–æ–∫–∞–∑—É—î —á–∞—Å —É <i>–≤–∞—à–æ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ</i>. "
            "FF –º–æ–∂–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É —Å–≤–æ—ó–π TZ, —è–∫—â–æ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î 'Synchronized Time'.\n\n"
            "<b>–©–æ —Ä–æ–±–ª—è—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏ —É Settings?</b>\n"
            "‚Ä¢ Impact ‚Äî —Ä—ñ–≤–µ–Ω—å –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ (High/Medium/Low/Non-eco).\n"
            "‚Ä¢ Currencies ‚Äî –≤–∞–ª—é—Ç–∏ –ø–æ–¥—ñ–π (USD, EUR, ...).\n"
            "‚Ä¢ Language ‚Äî –º–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –π –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –ø–æ–¥—ñ–π (–∑–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–µ—Ä–µ–∫–ª–∞–¥).\n"
            "‚Ä¢ Alerts ‚Äî –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ–¥—ñ—ó –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n\n"
            "<b>–ß–æ–º—É –±–∞—á—É –ø–æ–¥—ñ—é –Ω–µ –∑—ñ —Å–ø–∏—Å–∫—É –º–æ—ó—Ö –≤–∞–ª—é—Ç?</b>\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç —É Settings. –¢–∞–∫–æ–∂ —á–∞—Å—Ç–∏–Ω–∞ –ø–æ–¥—ñ–π –º–æ–∂–µ –±—É—Ç–∏ '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—é' –±–µ–∑ –≤–∞–ª—é—Ç–∏ ‚Äî "
            "–≤–æ–Ω–∏ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–≤—è—Ç–∞ –∞–±–æ –ø—Ä–µ—Å-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó).\n\n"
            "<b>–©–æ —Ç–∞–∫–µ Topics?</b>\n"
            "–°—Ç–∏—Å–ª—ñ –¥–æ–≤—ñ–¥–Ω–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö (CPI/PPI, GDP, PMI, —Ä–∏–Ω–æ–∫ –ø—Ä–∞—Ü—ñ —Ç–æ—â–æ) –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤.\n\n"
            "<b>–Ø–∫ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ?</b>\n"
            "–ë–æ—Ç –æ–Ω–æ–≤–ª—é—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ; –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ <code>/ff_refresh</code>.\n\n"
            "<b>–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å</b>\n"
            "–ó–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤/–º–æ–≤–∏ –¥–ª—è –≤–∞—à–æ–≥–æ —á–∞—Ç—É; –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è."
        )
    else:
        return (
            "<b>‚ùì FAQ</b>\n\n"
            "<b>Where do data come from?</b>\n"
            "Official ForexFactory JSON (thisweek.json).\n\n"
            "<b>Why do times differ from the website?</b>\n"
            "The bot renders times in <i>your local timezone</i>. "
            "On FF, page time may differ if 'Synchronized Time' doesn't match your device.\n\n"
            "<b>What do Settings filters do?</b>\n"
            "‚Ä¢ Impact ‚Äî importance level (High/Medium/Low/Non-eco).\n"
            "‚Ä¢ Currencies ‚Äî event currencies (USD, EUR, ‚Ä¶).\n"
            "‚Ä¢ Language ‚Äî interface and event titles language (translated when possible).\n"
            "‚Ä¢ Alerts ‚Äî how many minutes before an event to notify.\n\n"
            "<b>Why do I see a currency I didn't select?</b>\n"
            "Re-check currencies. Some items are 'neutral' (no currency) like holidays/pressers and may still appear.\n\n"
            "<b>What are Topics?</b>\n"
            "Short explainers by category (CPI/PPI, GDP, PMI, labor, etc.).\n\n"
            "<b>How to refresh?</b>\n"
            "Auto refresh is used; on demand use <code>/ff_refresh</code>.\n\n"
            "<b>Privacy</b>\n"
            "Only your chat's filter/language prefs are stored; no personal data."
        )

def _weekly_summary_text(events, lang: str) -> list[str]:
    """
    –ü—Ä–∏–π–º–∞—î –í–ñ–ï –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ —Ç–∏–∂–¥–µ–Ω—å (–∑–∞ impact/currencies) —ñ
    –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—á–∞–Ω—Ç—ñ–≤) –¥–ª—è Telegram.
    """
    if not events:
        return [_t_en_ua(lang,
            "üìà <b>Weekly summary</b>\nNo events match your filters for this week.",
            "üìà <b>–ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è</b>\n–ó–∞ –≤–∞—à–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è –ø–æ–¥—ñ–π –Ω–µ–º–∞—î."
        )]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ –¥–∞—Ç–∞–º–∏ —Ç–∏–∂–Ω—è
    start_local, end_local = _week_bounds_local(datetime.now(LOCAL_TZ))
    hdr = _t_en_ua(
        lang,
        f"üìà <b>Weekly summary</b>\nWeek: <i>{start_local:%a %b %d}</i> ‚Üí <i>{(end_local - timedelta(seconds=1)):%a %b %d}</i>\n",
        f"üìà <b>–ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è</b>\n–¢–∏–∂–¥–µ–Ω—å: <i>{start_local:%a %b %d}</i> ‚Üí <i>{(end_local - timedelta(seconds=1)):%a %b %d}</i>\n",
    )

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏
    total = len(events)
    by_impact = {"High": 0, "Medium": 0, "Low": 0, "Non-economic": 0}
    by_currency: dict[str, int] = {}

    for ev in events:
        imp = (ev.impact or "").title()
        if imp in by_impact:
            by_impact[imp] += 1
        cur = (ev.currency or "").upper()
        if cur:
            by_currency[cur] = by_currency.get(cur, 0) + 1

    # –¢–æ–ø –≤–∞–ª—é—Ç (–¥–æ 6)
    top_curs = sorted(by_currency.items(), key=lambda x: (-x[1], x[0]))[:6]
    top_curs_txt = ", ".join(f"{c}√ó{n}" for c, n in top_curs) if top_curs else _t_en_ua(lang, "n/a", "–Ω/–¥")

    # Summary-–±–ª–æ–∫
    summary_lines = [
        hdr,
        _t_en_ua(lang, "<b>Totals</b>:", "<b>–ü—ñ–¥—Å—É–º–∫–∏</b>:"),
        _t_en_ua(lang,
                 f"‚Ä¢ Events: <b>{total}</b>",
                 f"‚Ä¢ –ü–æ–¥—ñ–π: <b>{total}</b>"),
        f"‚Ä¢ {IMPACT_EMOJI['High']} {_t_en_ua(lang,'High','–í–∏—Å–æ–∫–∏–π')}: <b>{by_impact['High']}</b>",
        f"‚Ä¢ {IMPACT_EMOJI['Medium']} {_t_en_ua(lang,'Medium','–°–µ—Ä–µ–¥–Ω—ñ–π')}: <b>{by_impact['Medium']}</b>",
        f"‚Ä¢ {IMPACT_EMOJI['Low']} {_t_en_ua(lang,'Low','–ù–∏–∑—å–∫–∏–π')}: <b>{by_impact['Low']}</b>",
        f"‚Ä¢ {IMPACT_EMOJI['Non-economic']} {_t_en_ua(lang,'Non-eco','–ù–µ–π—Ç—Ä.')}: <b>{by_impact['Non-economic']}</b>",
        _t_en_ua(lang, f"‚Ä¢ Top currencies: {top_curs_txt}", f"‚Ä¢ –¢–æ–ø –≤–∞–ª—é—Ç–∏: {top_curs_txt}"),
        ""
    ]

    # –•–∞–π–ª–∞–π—Ç–∏ (–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –º–∞–π–±—É—Ç–Ω—ñ/—Ä–µ—à—Ç–∞ —Ç–∏–∂–Ω—è –ø–æ–¥—ñ—ó: High ‚Üí –ø–æ—Ç—ñ–º Medium), –¥–æ 10 —Ä—è–¥–∫—ñ–≤
    now_utc = datetime.now(UTC)
    upcoming = [e for e in events if e.date >= now_utc]
    upcoming.sort(key=lambda e: (e.impact != "High", e.date))  # High —Å–ø–µ—Ä—à—É, –ø–æ—Ç—ñ–º –∑–∞ —á–∞—Å–æ–º
    highlights = upcoming[:10] if upcoming else events[:10]

    if highlights:
        summary_lines.append(_t_en_ua(lang, "<b>Highlights ahead</b>:", "<b>–ì–æ–ª–æ–≤–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥—É</b>:"))
        for ev in highlights:
            summary_lines.append(_compact_event_line(ev, lang))

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Ç–∏ –ø–æ –¥–æ–≤–∂–∏–Ω—ñ ~3500 —Å–∏–º–≤–æ–ª—ñ–≤ (–∑ –∑–∞–ø–∞—Å–æ–º –¥–æ 4096)
    text = "\n".join(summary_lines)
    chunks: list[str] = []
    while len(text) > 3500:
        cut = text.rfind("\n", 0, 3500)
        if cut == -1:
            cut = 3500
        chunks.append(text[:cut])
        text = text[cut:].lstrip()
    chunks.append(text)
    return chunks

async def _send_weekly_summary(m: Message, subs: dict):
    """
    –ó–±—ñ—Ä weekly summary –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å —É –ª–æ–∫–∞–ª—å–Ω—ñ–π TZ –∑
    —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ impact/currency.
    """
    subs = _rowdict(subs)
    lang = _lang(subs)

    impacts_raw = csv_to_list(subs.get("impact_filter", ""))
    impacts = [normalize_impact(x) for x in impacts_raw if normalize_impact(x)]
    countries = csv_to_list(subs.get("countries_filter", ""))

    try:
        events = await fetch_calendar(lang=lang)
    except Exception as e:
        log.exception("[weekly] load events failed: %s", e)
        await m.answer(_t_en_ua(lang, "Internal fetch error. See logs.", "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –î–∏–≤. –ª–æ–≥–∏."))
        return

    # –º–µ–∂—ñ —Ç–∏–∂–Ω—è
    now_local = datetime.now(LOCAL_TZ)
    sunday_local, next_sunday_local = _week_bounds_local(now_local)
    start_utc = sunday_local.astimezone(UTC)
    end_utc = next_sunday_local.astimezone(UTC)

    # –≤—ñ–∫–Ω–æ —Ç–∏–∂–Ω—è, —Ñ—ñ–ª—å—Ç—Ä–∏
    in_window = [e for e in events if start_utc <= e.date < end_utc]
    filtered = filter_events(in_window, impacts, countries)
    filtered.sort(key=lambda e: e.date)

    # –≤—ñ–¥–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—â–æ —Ç–µ–∫—Å—Ç –¥–æ–≤–≥–∏–π
    for chunk_txt in _weekly_summary_text(filtered, lang):
        await m.answer(chunk_txt, parse_mode="HTML", disable_web_page_preview=True)

# --------------------------- core actions ---------------------------

async def _send_today(m: Message, subs: dict):
    """
    TODAY: –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π ForexFactory (thisweek.json) –∑ –≤—ñ–∫–Ω–æ–º 00:00‚Äì24:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è.
    """
    subs = _rowdict(subs)
    lang = _lang(subs)

    impacts = csv_to_list(subs.get("impact_filter", ""))
    countries = csv_to_list(subs.get("countries_filter", ""))

    log.info("üü¢ [_send_today] forex only | impacts=%s | countries=%s",
             subs.get("impact_filter"), subs.get("countries_filter"))

    try:
        events = await fetch_calendar(lang=lang)
    except Exception as e:
        log.exception("[today] load events failed: %s", e)
        await m.answer(_t_en_ua(lang, "Internal fetch error. See logs.", "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –î–∏–≤. –ª–æ–≥–∏."))
        return

    now_local = datetime.now(LOCAL_TZ)
    start_local = now_local.replace(hour=0, minute=0, second=0, microsecond=0)
    end_local = start_local + timedelta(days=1)
    start_utc = start_local.astimezone(UTC)
    end_utc = end_local.astimezone(UTC)

    in_window = [e for e in events if start_utc <= e.date < end_utc]
    log.debug("[today/forex] window %s..%s, all=%d, in_window=%d",
              start_utc.isoformat(), end_utc.isoformat(), len(events), len(in_window))

    filtered = filter_events(in_window, impacts, countries)
    filtered.sort(key=lambda e: e.date)

    if not filtered:
        await m.answer(_t_en_ua(lang, "Today: no events match your filters.", "–°—å–æ–≥–æ–¥–Ω—ñ: –ø–æ–¥—ñ–π –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ–º–∞—î."))
        return

    header = _t_en_ua(lang, "üìÖ <b>Today</b>\n", "üìÖ <b>–°—å–æ–≥–æ–¥–Ω—ñ</b>\n")
    for pack in chunk(filtered, 8):
        body = "\n\n".join(event_to_text(ev, LOCAL_TZ, lang) for ev in pack)
        await m.answer(header + body, parse_mode="HTML", disable_web_page_preview=True)
        header = ""

async def _send_week(m: Message, subs: dict):
    """
    THIS WEEK: –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π ForexFactory, –Ω–µ–¥—ñ–ª—è‚Üí–Ω–µ–¥—ñ–ª—è —É –ª–æ–∫–∞–ª—å–Ω—ñ–π TZ.
    """
    subs = _rowdict(subs)
    lang = _lang(subs)

    impacts_raw = csv_to_list(subs.get("impact_filter", ""))
    impacts = [normalize_impact(x) for x in impacts_raw if normalize_impact(x)]
    countries = csv_to_list(subs.get("countries_filter", ""))

    log.info("üü£ [_send_week] forex only | impacts=%s | countries=%s",
             subs.get("impact_filter"), subs.get("countries_filter"))

    try:
        events = await fetch_calendar(lang=lang)
    except Exception as e:
        log.exception("[week] load events failed: %s", e)
        await m.answer(_t_en_ua(lang, "Internal fetch error. See logs.", "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –î–∏–≤. –ª–æ–≥–∏."))
        return

    # Sunday‚ÜíSunday –≤ LOCAL_TZ
    now_local = datetime.now(LOCAL_TZ)
    delta_days = (now_local.weekday() + 1) % 7  # Sun=0
    sunday_local = (now_local - timedelta(days=delta_days)).replace(
        hour=0, minute=0, second=0, microsecond=0
    )
    next_sunday_local = sunday_local + timedelta(days=7)

    start_utc = sunday_local.astimezone(UTC)
    end_utc = next_sunday_local.astimezone(UTC)

    in_window = [e for e in events if start_utc <= e.date < end_utc]
    log.debug("[week/forex] window %s..%s, all=%d, in_window=%d",
              start_utc.isoformat(), end_utc.isoformat(), len(events), len(in_window))

    filtered = filter_events(in_window, impacts, countries)
    filtered.sort(key=lambda e: e.date)

    if not filtered:
        await m.answer(_t_en_ua(lang, "This week: no events match your filters.", "–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è –ø–æ–¥—ñ–π –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ–º–∞—î."))
        return

    header = _t_en_ua(lang, "üìÖ <b>This week</b>\n", "üìÖ <b>–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>\n")
    for pack in chunk(filtered, 8):
        body = "\n\n".join(event_to_text(ev, LOCAL_TZ, lang) for ev in pack)
        await m.answer(header + body, parse_mode="HTML", disable_web_page_preview=True)
        header = ""

async def _send_metals_today_offline(m: Message, lang: str) -> None:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ—Ñ–ª–∞–π–Ω-–ø–æ–¥—ñ—ó –ø–æ –º–µ—Ç–∞–ª–∞—Ö –∑–∞ 'today' –±–∞—Ç—á–∞–º–∏ –ø–æ 8,
    —è–∫ —É Forex today. –í—Å—ñ —Ç–µ–∫—Å—Ç–∏ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —á–µ—Ä–µ–∑ _t_en_ua.
    """
    try:
        html_path = resolve_data_path("metals_today.html")
        events = load_today_from_file(html_path)
    except FileNotFoundError:
        await m.answer(
            _t_en_ua(
                lang,
                f"Metals (offline) parse error: file not found: {html_path}",
                f"–ú–µ—Ç–∞–ª–∏ (–æ—Ñ–ª–∞–π–Ω) –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {html_path}",
            )
        )
        return
    except Exception as e:
        await m.answer(
            _t_en_ua(
                lang,
                f"Metals (offline) parse error: {e}",
                f"–ú–µ—Ç–∞–ª–∏ (–æ—Ñ–ª–∞–π–Ω) –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}",
            )
        )
        return

    # Apply metals filters
    from ..ui.filters import filter_metals_events
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    impacts = csv_to_list(subs.get("metals_impact_filter", ""))
    countries = csv_to_list(subs.get("metals_countries_filter", ""))
    filtered = filter_metals_events(events, impacts, countries)

    if not filtered:
        await m.answer(
            _t_en_ua(lang, "No metals events match your filters for today.", "–ü–æ–¥—ñ–π –ø–æ –º–µ—Ç–∞–ª–∞—Ö –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î.")
        )
        return

    header = _t_en_ua(lang, "ü™ô <b>Metals ‚Äî Today</b>\n", "ü™ô <b>–ú–µ—Ç–∞–ª–∏ ‚Äî –°—å–æ–≥–æ–¥–Ω—ñ</b>\n")

    # –ü–∞–∫—É—î–º–æ –ø–æ 8 –ø–æ–¥—ñ–π, —è–∫ —É Forex today
    first = True
    for pack in chunk(filtered, 8):
        body = "\n\n".join(mm_event_to_card_text(ev, lang=lang) for ev in pack)
        await m.answer(
            (header if first else "") + body,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        first = False

def mm_event_to_card_text_week(ev, lang: str = "en") -> str:
    """
    –ë–µ—Ä–µ–º–æ –≥–æ—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–∫–∏ (—è–∫ –¥–ª—è today) —ñ –º—ñ–Ω—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ—Ñ—ñ–∫—Å —á–∞—Å—É,
    –¥–æ–¥–∞—é—á–∏ –º—ñ—Å—è—Ü—å —ñ —á–∏—Å–ª–æ: '‚Ä¢ Sun 04:00 ‚Äî' -> '‚Ä¢ Sun Oct 26 04:00 ‚Äî'.
    –¢–∞–∫–æ–∂ –ø—ñ–¥—Ç—Ä–∏–º—É—î labels: '‚Ä¢ Thu All Day ‚Äî' -> '‚Ä¢ Thu Oct 30 All Day ‚Äî'.
    """
    import re
    base = mm_event_to_card_text(ev, lang=lang)  # —ñ—Å–Ω—É—é—á–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä –¥–ª—è today
    dt_local = ev.dt_utc.astimezone(LOCAL_TZ)
    
    # Extract time_str (may be "HH:MM" or "All Day", "Tentative", etc.)
    time_part = ev.time_str or "12:00"
    new_prefix = f"‚Ä¢ {dt_local:%a %b %d} {time_part} ‚Äî"
    
    # Match either HH:MM format OR any text (for labels like "All Day")
    # Pattern: "‚Ä¢ Day TimeOrLabel ‚Äî"
    return re.sub(r"^‚Ä¢\s*\w{3}\s+(.+?)\s+‚Äî", new_prefix, base, count=1)

async def _send_metals_week_offline(m: Message, lang: str):
    try:
        html_path = resolve_data_path("metals_week.html")
        events = load_week_from_file(html_path)
        
        # Apply metals filters
        from ..ui.filters import filter_metals_events
        subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
        impacts = csv_to_list(subs.get("metals_impact_filter", ""))
        countries = csv_to_list(subs.get("metals_countries_filter", ""))
        filtered = filter_metals_events(events, impacts, countries)
        
        if not filtered:
            await m.answer(
                _t_en_ua(lang, "No metals events match your filters for this week.", "–ü–æ–¥—ñ–π –ø–æ –º–µ—Ç–∞–ª–∞—Ö –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î.")
            )
            return

        chunk, acc = [], 0
        for ev in filtered:
            card = mm_event_to_card_text_week(ev, lang=lang)
            chunk.append(card)
            acc += len(card)

            if len(chunk) >= 12 or acc > 3500:
                await m.answer("\n\n".join(chunk), parse_mode="HTML")
                chunk, acc = [], 0

        if chunk:
            await m.answer("\n\n".join(chunk), parse_mode="HTML")

    except FileNotFoundError:
        await m.answer(
            _t_en_ua(lang, f"Metals (offline week) file not found: {html_path}", f"–ú–µ—Ç–∞–ª–∏ (–æ—Ñ–ª–∞–π–Ω —Ç–∏–∂–¥–µ–Ω—å) —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {html_path}")
        )
    except Exception as e:
        await m.answer(
            _t_en_ua(lang, f"Metals (offline week) parse error: {e}", f"–ú–µ—Ç–∞–ª–∏ (–æ—Ñ–ª–∞–π–Ω —Ç–∏–∂–¥–µ–Ω—å) –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        )

# --------------------------- text commands ---------------------------

@router.message(Command("start"))
async def cmd_start(m: Message):
    ensure_sub(m.from_user.id, m.chat.id)
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = _lang(subs)
    await m.answer(
        _t_en_ua(lang, "Choose a section:", "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:"),
        reply_markup=root_menu_kb(lang=lang),
    )

@router.message(Command("menu"))
async def cmd_menu(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = _lang(subs)
    await m.answer(
        _t_en_ua(lang, "Choose a section:", "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:"),
        reply_markup=root_menu_kb(lang=lang),
    )

@router.message(Command("today"))
async def cmd_today(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    if not subs:
        ensure_sub(m.from_user.id, m.chat.id)
        subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    await _send_today(m, subs)

@router.message(Command("week"))
async def cmd_week(m: Message):
    subs = get_sub(m.from_user.id, m.chat.id)
    if not subs:
        ensure_sub(m.from_user.id, m.chat.id)
        subs = get_sub(m.from_user.id, m.chat.id)
    await _send_week(m, subs)

@router.message(Command("ff_refresh"))
async def cmd_ff_refresh(m: Message):
    try:
        from ..services.forex_client import clear_ff_cache
        n = clear_ff_cache()
        msg = "‚úÖ Forex cache refreshed"
        if isinstance(n, int):
            msg += f" ({n} cleared)" if n > 0 else " (nothing cached)"
        await m.answer(msg)
    except Exception as e:
        await m.answer(f"Refresh error: {e}")

@router.message(Command("tutorial"))
async def cmd_tutorial(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = subs.get("lang_mode", "en")
    await m.answer(_tutorial_text(lang), parse_mode="HTML", reply_markup=back_kb(lang))

@router.message(Command("weekly_summary"))
async def cmd_weekly_summary(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    if not subs:
        ensure_sub(m.from_user.id, m.chat.id)
        subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    await _send_weekly_summary(m, subs)

@router.message(Command("about"))
async def cmd_about(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = subs.get("lang_mode", "en")
    text = _about_text(lang)
    # back –∫–Ω–æ–ø–∫–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await m.answer(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=back_kb() if lang != "ua" else back_kb())

@router.message(Command("faq"))
async def cmd_faq(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = subs.get("lang_mode", "en")
    await m.answer(_faq_text(lang), parse_mode="HTML", disable_web_page_preview=True, reply_markup=back_kb(lang))

@router.message(Command("metals_today"))
async def cmd_metals_today(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = _lang(subs)
    await _send_metals_today_offline(m, lang)

@router.message(Command("metals_week"))
async def cmd_metals_week(m: Message):
    ensure_sub(m.from_user.id, m.chat.id)
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = _lang(subs)
    await _send_metals_week_offline(m, lang)
