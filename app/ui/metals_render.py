# app/ui/metals_render.py
from __future__ import annotations
from typing import List
from ..core.models import MMEvent
from ..utils.helpers import chunk
from ..config.settings import LOCAL_TZ

def build_grouped_blocks(events: List[MMEvent], prefix: str = "", lang: str = "en") -> List[str]:
    """
    –ì—Ä—É–ø—É—î –ø–æ–¥—ñ—ó –ø–æ –¥–Ω—è—Ö —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.
    –ö–æ–∂–µ–Ω –±–ª–æ–∫ ‚Äî —Ü–µ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram.
    """
    if not events:
        return []

    # –ì—Ä—É–ø—É—î–º–æ –ø–æ–¥—ñ—ó –ø–æ –¥–Ω—è—Ö (–≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ)
    by_day = {}
    for ev in events:
        # Convert UTC to local timezone for grouping
        local_dt = ev.dt_utc.astimezone(LOCAL_TZ)
        day_key = local_dt.strftime("%Y-%m-%d")
        if day_key not in by_day:
            by_day[day_key] = []
        by_day[day_key].append(ev)

    # –°–æ—Ä—Ç—É—î–º–æ –¥–Ω—ñ
    sorted_days = sorted(by_day.keys())

    blocks = []
    for day_key in sorted_days:
        day_events = by_day[day_key]
        day_events.sort(key=lambda e: e.dt_utc)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è (–≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ)
        first_event = day_events[0]
        local_dt = first_event.dt_utc.astimezone(LOCAL_TZ)
        day_header = local_dt.strftime("%A, %B %d")
        
        if prefix:
            header = f"ü™ô <b>{prefix} ‚Äî {day_header}</b>\n"
        else:
            header = f"ü™ô <b>{day_header}</b>\n"

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–¥—ñ—ó –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 8
        for pack in chunk(day_events, 8):
            body = "\n\n".join(mm_event_to_card_text(ev, lang) for ev in pack)
            blocks.append(header + body)
            header = ""  # –¢—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π —á–∞–Ω–∫ –º–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫

    return blocks

def mm_event_to_card_text(ev: MMEvent, lang: str = "en") -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø–æ–¥—ñ—é –º–µ—Ç–∞–ª—É –≤ –∫–∞—Ä—Ç–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    """
    from ..services.metals_parser import mm_event_to_card_text as _mm_event_to_card_text
    return _mm_event_to_card_text(ev, lang)
