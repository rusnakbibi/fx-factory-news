# app/commands.py
from __future__ import annotations

import logging
import re
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from .config import LOCAL_TZ, UTC, TOPIC_DEFS, TOPIC_EXPLAINERS
from .translator import UA_DICT
from .ff_client import get_events_thisweek_cached as fetch_calendar
from .filters import filter_events, normalize_impact
from .formatting import event_to_text
from .utils import csv_to_list, chunk
from .keyboards import (
    main_menu_kb,
    back_kb,
    settings_kb,
    subscribe_time_kb,
    alerts_presets_kb,
    topics_kb,
    back_to_topics_kb,
)
from .db import ensure_sub, get_sub, unsubscribe, set_sub

router = Router()
log = logging.getLogger(__name__)

# --------------------------- helpers ---------------------------

def _rowdict(row) -> dict:
    if row is None:
        return {}
    return dict(row) if not isinstance(row, dict) else row

def _lang(subs: dict) -> str:
    return (subs.get("lang_mode") or "en").lower()

def _t_en_ua(lang: str, en: str, ua: str) -> str:
    return en if lang != "ua" else ua

def _tutorial_text(lang: str = "en") -> str:
    if lang == "ua":
        return (
            "‚ùì <b>–î–æ–≤—ñ–¥–∫–∞</b>\n"
            "–ö–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç—ñ:\n\n"
            "‚Ä¢ <b>–°—å–æ–≥–æ–¥–Ω—ñ</b> ‚Äî –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –ø–æ–¥—ñ—ó –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∞—à–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.\n"
            "‚Ä¢ <b>–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è</b> ‚Äî –ø–æ–¥—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è (–Ω–µ–¥—ñ–ª—è‚Üí–Ω–µ–¥—ñ–ª—è) –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.\n"
            "‚Ä¢ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b> ‚Äî —Ç—É—Ç –≤–∏:\n"
            "   ‚Äî –æ–±–∏—Ä–∞—î—Ç–µ —Ä—ñ–≤–µ–Ω—å –≤–ø–ª–∏–≤—É –ø–æ–¥—ñ–π: High / Medium / Low / Non-economic;\n"
            "   ‚Äî –æ–±–∏—Ä–∞—î—Ç–µ –≤–∞–ª—é—Ç–∏ (USD, EUR —Ç–æ—â–æ), –∑–∞ —è–∫–∏–º–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó;\n"
            "   ‚Äî –ø–µ—Ä–µ–º–∏–∫–∞—î—Ç–µ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (EN/UA);\n"
            "   ‚Äî –∑–∞–¥–∞—î—Ç–µ —á–∞—Å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Äî –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–æ—á–∞—Ç–∫—É <b>–∫–æ–∂–Ω–æ—ó –ø–æ–¥—ñ—ó</b> –Ω–∞–¥—ñ–π–¥–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15 —Ö–≤ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó CPI).\n"
            "   (–ß–∞—Å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî –≤—ñ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É –∑–∞–¥–∞–Ω—É –≥–æ–¥–∏–Ω—É.)\n"
            "‚Ä¢ <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b> ‚Äî —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (5/10/15/30/60/120 —Ö–≤) –ø–µ—Ä–µ–¥ <b>–∫–æ–∂–Ω–æ—é –ø–æ–¥—ñ—î—é</b> —É Today/This week.\n"
            "‚Ä¢ <b>–©–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç</b> ‚Äî –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–æ–±–∏, –∫–æ–ª–∏ —â–æ–¥–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—Ç–∏—Å–ª–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.\n"
            "‚Ä¢ <b>–¢–µ–º–∏</b> ‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –º–∞–∫—Ä–æ—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ (CPI, GDP, PMI —Ç–æ—â–æ) –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é.\n"
            "‚Ä¢ <b>–í–∏–º–∫–Ω—É—Ç–∏</b> ‚Äî –∑—É–ø–∏–Ω—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É.\n\n"
            "<i>–ü–æ—Ä–∞–¥–∞:</i> —è–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî —Ä–æ–∑—à–∏—Ä—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ (–¥–æ–¥–∞–π—Ç–µ –≤–∞–ª—é—Ç–∏ –∞–±–æ —Ä—ñ–≤–Ω—ñ –≤–ø–ª–∏–≤—É)."
        )
    else:
        return (
            "‚ùì <b>Tutorial</b>\n"
            "A quick guide to the bot controls:\n\n"
            "‚Ä¢ <b>Today</b> ‚Äî shows today‚Äôs events with your filters applied.\n"
            "‚Ä¢ <b>This week</b> ‚Äî events for the current week (Sun‚ÜíSun) with filters.\n"
            "‚Ä¢ <b>Settings</b> ‚Äî here you can:\n"
            "   ‚Äî choose event impact levels: High / Medium / Low / Non-economic;\n"
            "   ‚Äî select currencies (USD, EUR, etc.) to include;\n"
            "   ‚Äî switch interface language (EN/UA);\n"
            "   ‚Äî set the <u>alert lead time</u> ‚Äî how many minutes <b>before each event</b> you‚Äôll get a reminder (e.g., 15 min before CPI release).\n"
            "   (Alert lead time does <b>not</b> affect the Daily Digest ‚Äî it is sent at the scheduled time.)\n"
            "‚Ä¢ <b>Alerts</b> ‚Äî quick presets (5/10/15/30/60/120 min) for reminders <b>before each event</b> in Today/This week.\n"
            "‚Ä¢ <b>Daily Digest</b> ‚Äî pick a time of day to receive a compact summary of upcoming events.\n"
            "‚Ä¢ <b>Topics</b> ‚Äî concise explainers for key macro indicators (CPI, GDP, PMI, etc.).\n"
            "‚Ä¢ <b>Stop</b> ‚Äî disables notifications for this chat.\n\n"
            "<i>Tip:</i> If results look empty, widen filters (add currencies or impact levels)."
        )

# --------------------------- core actions ---------------------------

async def _send_today(m: Message, subs: dict):
    """
    TODAY: –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π ForexFactory (thisweek.json) –∑ –≤—ñ–∫–Ω–æ–º 00:00‚Äì24:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è.
    """
    subs = _rowdict(subs)
    lang = _lang(subs)

    impacts = csv_to_list(subs.get("impact_filter", ""))
    countries = csv_to_list(subs.get("countries_filter", ""))

    log.info("üü¢ [_send_today] forex only | impacts=%s | countries=%s",
             subs.get("impact_filter"), subs.get("countries_filter"))

    try:
        events = await fetch_calendar(lang=lang)
    except Exception as e:
        log.exception("[today] load events failed: %s", e)
        await m.answer(_t_en_ua(lang, "Internal fetch error. See logs.", "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –î–∏–≤. –ª–æ–≥–∏."))
        return

    now_local = datetime.now(LOCAL_TZ)
    start_local = now_local.replace(hour=0, minute=0, second=0, microsecond=0)
    end_local = start_local + timedelta(days=1)
    start_utc = start_local.astimezone(UTC)
    end_utc = end_local.astimezone(UTC)

    in_window = [e for e in events if start_utc <= e.date < end_utc]
    log.debug("[today/forex] window %s..%s, all=%d, in_window=%d",
              start_utc.isoformat(), end_utc.isoformat(), len(events), len(in_window))

    filtered = filter_events(in_window, impacts, countries)
    filtered.sort(key=lambda e: e.date)

    if not filtered:
        await m.answer(_t_en_ua(lang, "Today: no events match your filters.", "–°—å–æ–≥–æ–¥–Ω—ñ: –ø–æ–¥—ñ–π –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ–º–∞—î."))
        return

    header = _t_en_ua(lang, "üìÖ <b>Today</b>\n", "üìÖ <b>–°—å–æ–≥–æ–¥–Ω—ñ</b>\n")
    for pack in chunk(filtered, 8):
        body = "\n\n".join(event_to_text(ev, LOCAL_TZ) for ev in pack)
        await m.answer(header + body, parse_mode="HTML", disable_web_page_preview=True)
        header = ""

async def _send_week(m: Message, subs: dict):
    """
    THIS WEEK: –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π ForexFactory, –Ω–µ–¥—ñ–ª—è‚Üí–Ω–µ–¥—ñ–ª—è —É –ª–æ–∫–∞–ª—å–Ω—ñ–π TZ.
    """
    subs = _rowdict(subs)
    lang = _lang(subs)

    impacts_raw = csv_to_list(subs.get("impact_filter", ""))
    impacts = [normalize_impact(x) for x in impacts_raw if normalize_impact(x)]
    countries = csv_to_list(subs.get("countries_filter", ""))

    log.info("üü£ [_send_week] forex only | impacts=%s | countries=%s",
             subs.get("impact_filter"), subs.get("countries_filter"))

    try:
        events = await fetch_calendar(lang=lang)
    except Exception as e:
        log.exception("[week] load events failed: %s", e)
        await m.answer(_t_en_ua(lang, "Internal fetch error. See logs.", "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –î–∏–≤. –ª–æ–≥–∏."))
        return

    # Sunday‚ÜíSunday –≤ LOCAL_TZ
    now_local = datetime.now(LOCAL_TZ)
    delta_days = (now_local.weekday() + 1) % 7  # Sun=0
    sunday_local = (now_local - timedelta(days=delta_days)).replace(
        hour=0, minute=0, second=0, microsecond=0
    )
    next_sunday_local = sunday_local + timedelta(days=7)

    start_utc = sunday_local.astimezone(UTC)
    end_utc = next_sunday_local.astimezone(UTC)

    in_window = [e for e in events if start_utc <= e.date < end_utc]
    log.debug("[week/forex] window %s..%s, all=%d, in_window=%d",
              start_utc.isoformat(), end_utc.isoformat(), len(events), len(in_window))

    filtered = filter_events(in_window, impacts, countries)
    filtered.sort(key=lambda e: e.date)

    if not filtered:
        await m.answer(_t_en_ua(lang, "This week: no events match your filters.", "–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è –ø–æ–¥—ñ–π –∑–∞ –≤–∞—à–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –Ω–µ–º–∞—î."))
        return

    header = _t_en_ua(lang, "üìÖ <b>This week</b>\n", "üìÖ <b>–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è</b>\n")
    for pack in chunk(filtered, 8):
        body = "\n\n".join(event_to_text(ev, LOCAL_TZ) for ev in pack)
        await m.answer(header + body, parse_mode="HTML", disable_web_page_preview=True)
        header = ""

# --------------------------- text commands ---------------------------

@router.message(Command("start"))
async def cmd_start(m: Message):
    ensure_sub(m.from_user.id, m.chat.id)
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = _lang(subs)
    await m.answer(
        _t_en_ua(lang, "Back to menu:", "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é:"),
        reply_markup=main_menu_kb(lang=lang),
    )

@router.message(Command("menu"))
async def cmd_menu(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = _lang(subs)
    await m.answer(_t_en_ua(lang, "Main menu:", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:"), reply_markup=main_menu_kb(lang=lang))

@router.message(Command("today"))
async def cmd_today(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    if not subs:
        ensure_sub(m.from_user.id, m.chat.id)
        subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    await _send_today(m, subs)

@router.message(Command("week"))
async def cmd_week(m: Message):
    subs = get_sub(m.from_user.id, m.chat.id)
    if not subs:
        ensure_sub(m.from_user.id, m.chat.id)
        subs = get_sub(m.from_user.id, m.chat.id)
    await _send_week(m, subs)

@router.message(Command("ff_refresh"))
async def cmd_ff_refresh(m: Message):
    try:
        from .ff_client import clear_ff_cache
        n = clear_ff_cache()
        msg = "‚úÖ Forex cache refreshed"
        if isinstance(n, int):
            msg += f" ({n} cleared)" if n > 0 else " (nothing cached)"
        await m.answer(msg)
    except Exception as e:
        await m.answer(f"Refresh error: {e}")

@router.message(Command("tutorial"))
async def cmd_tutorial(m: Message):
    subs = _rowdict(get_sub(m.from_user.id, m.chat.id))
    lang = subs.get("lang_mode", "en")
    await m.answer(_tutorial_text(lang), parse_mode="HTML", reply_markup=back_kb(lang))

# ---- –∑ –º–µ–Ω—é
@router.callback_query(F.data == "menu:tutorial")
async def cb_tutorial(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = subs.get("lang_mode", "en")
    await c.message.edit_text(
        _tutorial_text(lang),
        parse_mode="HTML",
        reply_markup=back_kb(lang),
        disable_web_page_preview=True
    )
    await c.answer()

# --------------------------- inline: main menu ---------------------------

@router.callback_query(F.data == "menu:home")
async def cb_home(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    await c.message.edit_text(_t_en_ua(lang, "Main menu:", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:"), reply_markup=main_menu_kb(lang=lang))
    await c.answer()

@router.callback_query(F.data == "menu:today")
async def cb_today(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    if not subs:
        ensure_sub(c.from_user.id, c.message.chat.id)
        subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    await c.answer(_t_en_ua(lang, "Fetching today‚Ä¶", "–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é ¬´–°—å–æ–≥–æ–¥–Ω—ñ¬ª‚Ä¶"), show_alert=False)
    try:
        await c.message.edit_text(_t_en_ua(lang, "üìÖ Today:", "üìÖ –°—å–æ–≥–æ–¥–Ω—ñ:"), reply_markup=back_kb(lang=lang))
    except Exception:
        pass
    await _send_today(c.message, subs)
    await c.message.answer(_t_en_ua(lang, "Back to menu:", "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é:"), reply_markup=main_menu_kb(lang=lang))

@router.callback_query(F.data == "menu:week")
async def cb_week(c: CallbackQuery):
    subs = get_sub(c.from_user.id, c.message.chat.id)
    if not subs:
        ensure_sub(c.from_user.id, c.message.chat.id)
        subs = get_sub(c.from_user.id, c.message.chat.id)
    lang = _lang(_rowdict(subs))
    await c.answer(_t_en_ua(lang, "Fetching this week‚Ä¶", "–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é ¬´–¶—å–æ–≥–æ —Ç–∏–∂–Ω—è¬ª‚Ä¶"), show_alert=False)
    try:
        await c.message.edit_text(_t_en_ua(lang, "üìÖ This week:", "üìÖ –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è:"), reply_markup=back_kb(lang=lang))
    except Exception:
        pass
    await _send_week(c.message, _rowdict(subs))
    await c.message.answer(_t_en_ua(lang, "Back to menu:", "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é:"), reply_markup=main_menu_kb(lang=lang))

# --------------------------- inline: Settings ---------------------------

@router.callback_query(F.data == "menu:settings")
async def menu_settings(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    if not subs:
        ensure_sub(c.from_user.id, c.message.chat.id)
        subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)

    kb = settings_kb(
        csv_to_list(subs.get("impact_filter", "")),
        csv_to_list(subs.get("countries_filter", "")),
        int(subs.get("alert_minutes", 30)),
        lang_mode=lang,
    )
    await c.message.edit_text(_t_en_ua(lang, "‚öôÔ∏è Settings:", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"), reply_markup=kb)
    await c.answer()

# toggle impact
@router.callback_query(F.data.startswith("imp:"))
async def cb_impact(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    impacts = set(csv_to_list(subs.get("impact_filter", "")))
    val = c.data.split(":", 1)[1]
    if val in impacts:
        impacts.remove(val)
    else:
        impacts.add(val)
    set_sub(c.from_user.id, c.message.chat.id, impact_filter=",".join(sorted(impacts)))

    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    kb = settings_kb(
        csv_to_list(subs.get("impact_filter", "")),
        csv_to_list(subs.get("countries_filter", "")),
        int(subs.get("alert_minutes", 30)),
        lang_mode=_lang(subs),
    )
    await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer(_t_en_ua(lang, "Impact updated", "–í–ø–ª–∏–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ"))

# toggle currency
@router.callback_query(F.data.startswith("cur:"))
async def cb_currency(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    curr = set(csv_to_list(subs.get("countries_filter", "")))
    val = c.data.split(":", 1)[1]
    if val in curr:
        curr.remove(val)
    else:
        curr.add(val)
    set_sub(c.from_user.id, c.message.chat.id, countries_filter=",".join(sorted(curr)))

    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    kb = settings_kb(
        csv_to_list(subs.get("impact_filter", "")),
        csv_to_list(subs.get("countries_filter", "")),
        int(subs.get("alert_minutes", 30)),
        lang_mode=_lang(subs),
    )
    await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer(_t_en_ua(lang, "Currencies updated", "–í–∞–ª—é—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ"))

# language
@router.callback_query(F.data.startswith("lang:"))
async def cb_lang(c: CallbackQuery):
    val = c.data.split(":", 1)[1]
    if val != "trash":
        set_sub(c.from_user.id, c.message.chat.id, lang_mode=val)

    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    kb = settings_kb(
        csv_to_list(subs.get("impact_filter", "")),
        csv_to_list(subs.get("countries_filter", "")),
        int(subs.get("alert_minutes", 30)),
        lang_mode=_lang(subs),
    )
    await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer(_t_en_ua(_lang(subs), "Language updated", "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ"))

# alert presets
@router.callback_query(F.data.startswith("al:"))
async def cb_alert(c: CallbackQuery):
    subs0 = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs0)
    try:
        val = int(c.data.split(":", 1)[1])
    except Exception:
        return await c.answer(_t_en_ua(lang, "Invalid value", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è"))
    set_sub(c.from_user.id, c.message.chat.id, alert_minutes=val)

    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    kb = settings_kb(
        csv_to_list(subs.get("impact_filter", "")),
        csv_to_list(subs.get("countries_filter", "")),
        int(subs.get("alert_minutes", 30)),
        lang_mode=_lang(subs),
    )
    try:
        await c.message.edit_reply_markup(reply_markup=kb)
    except Exception:
        pass
    await c.answer(_t_en_ua(lang, "Alert preset saved", "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ"))

# reset
@router.callback_query(F.data == "reset")
async def cb_reset(c: CallbackQuery):
    set_sub(
        c.from_user.id,
        c.message.chat.id,
        impact_filter="High,Medium",
        countries_filter="",
        alert_minutes=30,
        lang_mode="en",
    )
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    kb = settings_kb(
        csv_to_list(subs.get("impact_filter", "")),
        csv_to_list(subs.get("countries_filter", "")),
        int(subs.get("alert_minutes", 30)),
        lang_mode=_lang(subs),
    )
    await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer(_t_en_ua(_lang(subs), "Settings reset", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ"))

# source toggle ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ Forex
@router.callback_query(F.data.startswith("src:"))
async def cb_source(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    await c.answer(_t_en_ua(_lang(subs), "Only Forex is available now.", "–ó–∞—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ Forex."), show_alert=True)

# --------------------------- inline: Daily Digest ---------------------------

@router.callback_query(F.data == "menu:subscribe")
async def menu_subscribe(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    if not subs:
        ensure_sub(c.from_user.id, c.message.chat.id)
        subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    cur = subs.get("daily_time", "09:00")
    presets = ["08:00", "09:00", "10:00", "12:00", "15:00", "18:00"]
    await c.message.edit_text(
        _t_en_ua(lang, f"‚è± Choose daily digest time (current {cur}):", f"‚è± –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–∞–π–¥–∂–µ—Å—Ç—É (–∑–∞—Ä–∞–∑ {cur}):"),
        reply_markup=subscribe_time_kb(presets, lang=lang),
    )
    await c.answer()

@router.callback_query(F.data.startswith("sub:set:"))
async def cb_sub_set(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    t = c.data.split(":", 2)[2]
    if not re.fullmatch(r"\d{2}:\d{2}", t):
        return await c.answer(_t_en_ua(lang, "Invalid time", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å"))
    set_sub(c.from_user.id, c.message.chat.id, daily_time=t)
    await c.message.edit_text(_t_en_ua(lang, f"‚úÖ Daily digest at {t}.", f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ {t}."), reply_markup=main_menu_kb(lang=lang))
    await c.answer()

# --------------------------- inline: Alerts ---------------------------

@router.callback_query(F.data == "menu:alerts")
async def menu_alerts(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    if not subs:
        ensure_sub(c.from_user.id, c.message.chat.id)
        subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    cur = int(subs.get("alert_minutes", 30))
    await c.message.edit_text(_t_en_ua(lang, "‚è∞ Alert before event:", "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–¥—ñ—î—é:"),
                              reply_markup=alerts_presets_kb(cur, lang=lang))
    await c.answer()

# --------------------------- inline: Stop ---------------------------

@router.callback_query(F.data == "menu:stop")
async def menu_stop(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    unsubscribe(c.from_user.id, c.message.chat.id)
    await c.message.edit_text(_t_en_ua(lang, "Notifications disabled for this chat.", "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –≤–∏–º–∫–Ω–µ–Ω–æ."),
                              reply_markup=main_menu_kb(lang=lang))
    await c.answer()

# --------------------------- Topics ---------------------------

def _t(dct: dict, lang: str, fallback: str = "en") -> str:
    """–ü—Ä–æ—Å—Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: –±–µ—Ä–µ–º–æ dct[lang] –∞–±–æ dct[fallback]."""
    return dct.get(lang) or dct.get(fallback) or ""

@router.callback_query(F.data == "menu:topics")
async def menu_topics(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = _lang(subs)
    await c.message.edit_text(
        _t_en_ua(lang, "üìö Topics:", "üìö –¢–µ–º–∏:"),
        reply_markup=topics_kb(lang=lang)
    )
    await c.answer()

@router.callback_query(F.data.startswith("topic:"))
async def show_topic(c: CallbackQuery):
    subs = _rowdict(get_sub(c.from_user.id, c.message.chat.id))
    lang = subs.get("lang_mode", "en")
    _, topic_key = c.data.split(":", 1)

    td = TOPIC_DEFS.get(topic_key, {})
    title = (td.get("title", {}) or {}).get("ua" if lang == "ua" else "en", "Topic")
    blurb = (td.get("blurb", {}) or {}).get("ua" if lang == "ua" else "en", "")

    # –ë–µ—Ä–µ–º–æ —Å–ø–∏—Å–æ–∫ (EN –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, UA ‚Äì —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ)
    base_lang = "ua" if lang == "ua" else "en"
    expl = TOPIC_EXPLAINERS.get(topic_key, {}).get(base_lang, [])
    if not expl:
        expl = [("‚Äî", "No explainer yet / –ü–æ—è—Å–Ω–µ–Ω–Ω—è –±—É–¥–µ –¥–æ–¥–∞–Ω–æ")]

    lines = [f"üìö <b>{title}</b>", blurb, ""]

    for name, desc in expl:
        display_name = name
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ UA ‚Äî –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —É –¥—É–∂–∫–∞—Ö:
        if lang == "ua":
            ua = UA_DICT.get(name)
            if ua and ua != name:
                display_name = f"{name} ({ua})"
        lines.append(f"‚Ä¢ <b>{display_name}</b> ‚Äî {desc}")

    text = "\n".join(lines)

    from .keyboards import back_to_topics_kb
    await c.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=back_to_topics_kb(lang=lang),
        disable_web_page_preview=True
    )
    await c.answer()